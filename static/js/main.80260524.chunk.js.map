{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAaeA,E,iLATP,OACI,6BACI,wBAAIC,UAAU,0BAAd,eACA,wBAAIA,UAAU,0BAAd,uD,GALKC,IAAMC,WCYZC,E,iLAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,UAC9C,oD,GANGT,IAAMC,WC4BVS,E,iLA1BP,OACI,yBAAKX,UAAU,iBAEXK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,uBAAGb,UAAU,gBAAb,YACpC,0BAAMA,UAAU,kBAAhB,IAAoCK,KAAKC,MAAMM,KAA/C,KAAyDP,KAAKC,MAAMO,UAGzER,KAAKC,MAAMQ,aAAe,uBAAGd,UAAU,gBAAb,eACtB,0BAAMA,UAAU,kBAAhB,IAAoCK,KAAKC,MAAMQ,cAGnDT,KAAKC,MAAMS,UAAY,uBAAGf,UAAU,gBAAb,YACnB,0BAAMA,UAAU,kBAAhB,IAAoCK,KAAKC,MAAMS,WAGnDV,KAAKC,MAAMU,aAAe,uBAAGhB,UAAU,gBAAb,cACtB,0BAAMA,UAAU,kBAAhB,IAAoCK,KAAKC,MAAMU,cAGnDX,KAAKC,MAAMW,OAAS,2BAAIZ,KAAKC,MAAMW,Y,GArB7BhB,IAAMC,WCGtBgB,EAAU,mCAoEDC,E,2MAjEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAETd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAIYC,MAAM,+CAAD,OAAgDhB,EAAhD,YAAwDC,EAAxD,kBAAyEK,EAAzE,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMPnB,GAAQC,EACV,EAAKmB,SAAS,CACZlB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAIT,EAAKe,SAAS,CACZlB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,0BAvBA,4C,8HA6BX,OACE,6BACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMO,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAO,YAAaT,KAAKe,MAAMN,YACxBF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,SAAUV,KAAKe,MAAML,SACrBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,kB,GAvDlBhB,IAAMC,WCKJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.80260524.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"title-container__title\">Weather App</h1>\n                <h3 className=\"title-container__title\">National and local weather forecast for cities</h3>\n            </div>\n        )\n    }\n}\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component {\n    render() {\n        return(\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"Madrid\"/>\n                <input type=\"text\" name=\"country\" placeholder=\"Spain\"/>\n                <button>Get Weather</button>\n            </form>\n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component {\n    render() {\n        return(\n            <div className=\"weather__info\">\n                { \n                this.props.city && this.props.country && <p className=\"weather__key\">Location: \n                     <span className=\"weather__value\"> { this.props.city }, { this.props.country }</span></p>\n                }\n                { \n                this.props.temperature && <p className=\"weather__key\">Temperature:\n                    <span className=\"weather__value\"> { this.props.temperature }</span></p>\n                }\n                { \n                this.props.humidity && <p className=\"weather__key\">Humidity:\n                    <span className=\"weather__value\"> { this.props.humidity }</span></p>\n                }\n                { \n                this.props.description && <p className=\"weather__key\">Conditions: \n                    <span className=\"weather__value\"> { this.props.description }</span></p>\n                }\n                { \n                this.props.error && <p>{this.props.error}</p>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./Components/Titles\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\n\nconst API_KEY = \"477e17ab441340844897735e74263c7a\";\n \nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    }\n    else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a value.\"\n      });\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}